# 11강 ~ 12강

1.String 클래스에서 concat 메서드를 설명하시오.
- 문자열 연결(합성)하는 키워드.
- String 인스턴스는 Immutable 인스턴스이기 때문에 값 자체가 불변함. 
- 따라서 "" 안의 문자열의 합성을 위해서는 .concat 키워드를 활용하여야 한다.
예: String st3 = st1.concat(st2); // st1문자열 + st2문자열 = st3라는 새로운 단어를 생성.
cf. String st4 = "Fresh".concat(st3); // st3문자열에 ""안의 문자열을 직접 합성 가능함.


2.str.substring(2, 4); substring 사용법에 대하여 설명하시오.
- .substring(); 은 문자열의 일부 추출 키워드.
- String str = "abcdefg"; // ""안의 문자열은 순서대로 0123456 인덱스 번호 부여됨.
- str.substring(2, 4); // 인덱스 2~3에 위치한 내용의 문자열 반환. 즉, 출력값: "cd"
- 이 경우 반환 범위가 2~4가 아닌 2~3임에 주의하자.
cf. str.substring(2); // 인덱스 2 이후의 내용으로 된 문자열 반환. 출력값: "cdefg"


3.st1.compareTo(st2);compareTo 사용법에 대하여 설명하시오.
- 스트링 st1과 st2 간 문자열의 내용을 사전적으로 비교한 뒤, int형 값을 반환하는 키워드.
- 즉, 두 문자열의 내용(유니코드 코드값)을 첫 글자부터 차례대로 비교하여 다음과 같이 결괏값 출력.
예: int cmp;
    cmp = st1.compareTo(st2);
- 비굣값이 동일한 경우: 0 (cmp == 0) // 두 문자열 일치
- st1's 코드값 > st2's 코드값 : -음수 (cmp < 0) // 사전에서 189 페이지 - 190페이지 = -1페이지(음수)
- st1's 코드값 < st2's 코드값 : +양수 (cmp > 0)

cf. compareToIgnoreCase 란?
- case:대소문자 
- 즉, 대소문자는 무시하고 비교해라!


4.String.valueOf 에 대하여 설명하시오.
- valueOf() 메소드는 ()괄호 안의 해당 객체를 String 객체로 변환 시킴.
- int형이든 double형이든.. 즉, String의 객체로 형 변환하여 문자열로써 인식함.
- 따라서 원래 값이 int형 실수라도, 변환 후 String형이 되기 때문에 
  +연산을 할 경우 덧셈이 아닌, 문자열의 합성이 됨.
예: double e= 2.718281;
    String se = String.valueOf(e);  // 이 경우 정수 e 값은 문자열이 됨. = "2.718281"


5. 아래의 연산과정에서 호출되는 함수(원리)를 써서 표현해 보세요.
String str = "age: " + 17;

- str이라는 이름의 방 생성. 데이터타입은 String.
- 우측 값은 문자열과 기본 자료형인 int형의 +연산을 위해 데이터 타입의 통일이 필요함.
- 이때, 컴파일러에 의해 .concat 메소드와 .valueOf 메소드 호출되어 17은 String형으로 자동 형 변환됨.
- >> String str = "age: ".concat(String.valueOf(17));
- "age: "라는 문자열과 "17"이라는 문자열의 +합성이 됨.
- 따라서 출력값은 -> age: 17


6.StringBuilder 와 String 의 차이는?



7.String 을 이용하여 프로그래밍 하시오.
입력 : 990925-1012999
출력 : 990925 1012999

public static void main(String[] args) {	
		StringBuilder st = new StringBuilder("990925-1012999");
		st.replace(6, 7, " ");
		System.out.println(st.toString());
	}
<출력>
990925 1012999


8.아래의 메모리 그림을 그리시오.
int[] ar1 = new int[5];


9.아래를 프로그래밍 하시오.(단 클래스로 구성할것)
입력:lee sunkyo
출력:first name: lee second name:sunkyo

<클래스>
import java.util.Scanner;

class PracticeName {
	private String name;
	public String firstName, secondName;

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public void input() {
		Scanner sc = new Scanner(System.in);
		System.out.println("이름을 입력하세요. (성 이름)");
		name = sc.nextLine();

		int firstSpace = name.indexOf(" ");
		firstName = name.substring(0, firstSpace);
		secondName = name.substring(firstSpace + 1);
		System.out.println("First name: " + firstName + ", Second name: " + secondName);
		sc.close();
	}

}

<메인>
class PracticeNameMain {

	public static void main(String[] args) {
    PracticeName who = new PracticeName();
		who.input();
	}

}

<출력>
이름을 입력하세요. (성 이름)
lee sunkyo
First name: lee, Second name: sunkyo


<메인으로만 짠 경우>

import java.util.Scanner;

class PracticeNameMain {

	public static void main(String[] args) {
	
		Scanner sc = new Scanner(System.in);
		System.out.println("이름을 입력하세요. (성 이름)");

		String firstName, secondName, name;
		name = sc.nextLine();

		int firstSpace = name.indexOf(" ");
		firstName = name.substring(0, firstSpace);

		secondName = name.substring(firstSpace + 1);

		System.out.println("First name: " + firstName + ", Second name: " + secondName);

	}

}



10.아래를 프로그래밍 하시오.

입력 : 홍 길동 
출력 : 성 = 홍  이름 = 길동 

입력 : 홍길동 
출력 : 공백이 없군요. 다시 입력해주세요.


11.아래를 프로그래밍 하시오.
"Hello.java" 문자열에서 파일명과 확장자인 java를 분리시키는 프로그램을 짜시오.

입력: Hello.java
출력: 파일이름은:Hello 이며 확장자는 java 입니다.

입력: Java.avi 
출력: 파일이름은:Java 이며 확장자는 avi 입니다.


문제12. Scanner 클래스를 이용해서 한 줄 읽고, 공백으로 분리된 "단어"가 몇 개 들어 있는지 확인해보자.
 "그만"을 입력할 때까지 반복하는 프로그램이다.힌트(split 함수를 이용해 볼것)

예) 입력 : Java Programming 
출력 : 단어의 개수는 2
입력 : 자바 수업은 2층 C클래스 
출력 : 단어의 개수는 4
입력 : 그만 > 출력 : 프로그램 종료


