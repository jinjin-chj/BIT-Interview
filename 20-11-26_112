# 4강 

1. 결합 방향과 우선순위에 대하여 설명하시오.

- 결합 방향: 우선순위가 같을 때 적용하는 기준
- 우선순위: 곱하기, 나누기 같은 연산자 포함
cf. 연산자 우선순위 중 가장 높은 것: 괄호


2. 1 초과 100 미만인가? 를 코딩을 하게 되면?

public class LogicalOp {

	public static void main(String[] args) {
  
		int num = 11;
		boolean result;
		result = (1 < num) && (num < 100);
		System.out.println("1 초과 100 미만인가? " + result);
    
    }
}


3. 2의 배수 또는 3의 배수? 를 코딩을 하게 되면?

public class LogicalOp {
	public static void main(String[] args) {
  
		int num = 11;
		boolean result;
    result = ((num % 2 ) == 0) || ((num % 3) == 0);
		System.out.println("2의 배수 또는 3의 배수인가? " + result);
    
    }
}

4. && 와  || 설명하시오.

[논리 연산자]
&& : 'and' / 두 조건 모두 충족해야 true 출력. 둘 중에 하나라도 f일 경우 결괏값 false. / 따라서 앞 조건의 결괏값이 f이면 뒤 연산 안하고 종료.
|| : 'or' / 두 조건 중 한 조건만 true이면 결괏값 true. / 따라서 앞 조건의 결괏값이 t이면 뒤 연산 안하고 종료.


5. 아래의 프린트 결과를 예측해 보고, 코딩후 결과를 확인하시오
class SCE {
    public static void main(String[] args) {
        int num1 = 0; 
        int num2 = 0;
        boolean result;
        
        result = ((num1 += 10) < 0) && ((num2 += 10) > 0);
        System.out.println("result = " + result);
        System.out.println("num1 = " + num1);
        System.out.println("num2 = " + num2 + '\n');
		
        result = ((num1 += 10) > 0) || ((num2 += 10) > 0);
        System.out.println("result = " + result);
        System.out.println("num1 = " + num1);
        System.out.println("num2 = " + num2);
    }
}
====================================================================
<결과>
result = false
num1 = 10
num2 = 0

result = true
num1 = 20
num2 = 0


6. 아래가 에러가 나는 이유를 설명하고, 수정하시오
short num
short num = -num 

<이유>
+,-과 같은 부호 연산자는 사실 '(+1 * num)', '(-1 * num)'과 같은 연산 과정을 포함한다.
연산을 위해 메모리에서 cpu로 보내는 과정에서 32비트의 선을 모두 사용해야 하기 때문에,
int보다 작은 자료형은(정수 기준) 모두 int형으로 자동 형 변환된다.
따라서 해당 소스코드에서는 short형으로 명시적 형 변환을 해줘야 에러가 발생하지 않는다.

<수정>
short num
short num = (short)(-num)   // 명시적 형 변환 


7. 전위증가 연산자와 후위증가 연산자의 차이는?

<전위 증가 연산자>
- ++num 의 형태
- num = (num + 1)로 대입.

<후위 증가 연산자>
- num++ 의 형태
- 일단 n값 넣고 하나의 "실행 단위"가 끝나고 난 뒤, ++(n+1)해서 n값 증가.  
- 실행 단위: 보통 ; 를 하나의 실행 단위로 보지만, 다음과 같이 아닌 경우 존재.
  예: 
    int x = 10;
		int y = x-- + 5 + --x;		
  -> 이렇게 연산이 3개 이상이면 실행단위 2개로 봄. 
    앞 연산 먼저하고(실행단위1) 후위 적용하고 뒤에 연산함(실행단위2).


8. 아래의 비트연산자 4가지를 설명하시오.
-&,^,|,~ 

<비트 연산자> : 각각의 비트를 대상으로 연산을 진행, 
                그리고 각 비트를 대상으로 진행된 연산 결과를 묶어서 하나의 연산 결과 반환.
                비트? ex) 5 = 00000101 (2), 여기서 0과 1 각각 한 자리.
  가. & : 비트 단위로 and 연산 진행.  양 쪽 비트가 모두 1일 때만 1, 그 외엔 0
  나. | : 비트 단위로 or 연산 진행. 둘 중에 하나라도 1이면 1, 모두 0일 때만 0
  다. ^ : 비트 단위로 xor 연산 진행.  양 쪽 비트가 서로 다를 때만 1, 같으면 0
  라. ~ : 피연산자의 모든 비트를 반전시켜서 얻은 결과를 반환. 단항연산자. 0 <-> 1로 반전시킴.


9. 아래의 쉬프트 연산자에 대하여 설명하시오.
<< , >>
<비트 쉬프트 연산자> : 피연산자의 비트 열을 왼쪽 또는 오른쪽으로 이동시킴.
  가. << : 왼쪽으로 숫자만큼 이동시키고 빈 공간은 0으로 채움. 
          n값의 2배 증가(n * 2^1), 즉, 2배, 4배, 8배,,,,,
  나. >> : 오른쪽으로 숫자만큼 이동시키고 빈 공간은 음수는 1, 양수는 0으로 채움. 
          n값의 1/2배 증가(n * 2^-1), 즉, 1/2배, 1/4배, 1/8배,,,,,
  다. >>> : 오른쪽으로 숫자만큼 이동시키고 빈 공간은 0으로 채움.


10. 전위연산자와 후위연산자에 대하여 설명하시오.

<전위 연산자>
- 'prefix', ++n/--n 의 형태
- n = n + 1 / n = n - 1 로 대입.

<후위 연산자>
-'postfix', n++/n-- 의 형태
- 일단 n값 넣고 하나의 "실행 단위"가 끝나고 난 뒤, (n+1) or (n-1)해서 n값 증감.  
- 실행 단위: 보통 ; 를 하나의 실행 단위로 보지만, 다음과 같이 아닌 경우 존재.
  예: 
    int x = 10;
		int y = x-- + 5 + --x;		
  -> 이렇게 연산이 3개 이상이면 실행단위 2개로 봄. 
    앞 연산 먼저하고(실행단위1) 후위 적용하고 뒤에 연산함(실행단위2).



11. 아래의 출력값을 예측하시오.
class AssignSteResult {
    public static void main(String[] args) {
        int num1 = 10, num2 = 20, num3 = 30;
        num1 = num2 = num3;

        /*
          = 연산자는 결합 방향이 오른쪽에서 왼쪽으로 진행된다. 
          따라서 위의 문장은 다음과 같다. 
          num1 = (num2 = num3);        
        */
        
        System.out.println(num1);	
        System.out.println(num2);
        System.out.println(num3);
    }
}
=============================================================
<결과>
30
30
30


12. 아래의 출력값을 예측하시오.
class SCE {
    public static void main(String[] args) {
        int num1 = 0; 
        int num2 = 0;
        boolean result;

        num1 += 10;
        num2 += 10;        
        result = (num1 < 0) && (num2 > 0);   

        System.out.println("result = " + result);
        System.out.println("num1 = " + num1);
        System.out.println("num2 = " + num2 + '\n');
		
        num1 += 10;
        num2 += 10;        
        result = (num1 > 0) || (num2 > 0);

        System.out.println("result = " + result);
        System.out.println("num1 = " + num1);
        System.out.println("num2 = " + num2);
    }
}
=============================================================
<결과>
result = false
num1 = 10
num2 = 10

result = true 
num1 = 20
num2 = 20



13. 아래의 출력값을 예측하시오.
class AddNum {
    public static void main(String[] args) {
        int result = 3 + 6;
        System.out.println("3 + 6 = " + result);
        
        result += 9;
        System.out.println("3 + 6 + 9 = " + result);
        
        result += 12;
        System.out.println("3 + 6 + 9 + 12 = " + result);
    }
}
================================================================
<결과>
3 + 6 = 9
3 + 6 + 9 = 18
3 + 6 + 9 + 12 = 30





