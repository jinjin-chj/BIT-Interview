#23

1.ArrayList 와 LinkedList 의 장단점은?
- ArrayList  (+): 저장된 인스턴스의 참조가 빠르다(주소를 빨리 찾아간다.). 따라서 검색만 할 때 좋음
- ArrayList  (-): 인스턴스 삭제 등 수정 시 많은 연산이 필요하여 시간이 비교적 많이 소요됨.

- LinkedList (+): 삽입, 삭제 등 수정이 많을 때 좋음.
- LinkedList (-): 저장된 인스턴스의 참조 과정이 배열에 비해 복잡하며 다소 느릴 수 있다.
	 즉, 1 -> 2 -> 3 있을 때, 1에서 3 참조하려면 2도 지나쳐야 함.(2도 참조해야 함.)



2.Scanner 클래스로 -1이 입력될 때까지 양의 정수를 입력받아 저장하고 
검색하여 가장 큰 수를 출력하는 프로그램을 작성하라

정수(-1이 입력될 때까지)>> 10 6 22 6 88 77 -1

가장 큰 수는 88

<풀이>
package java_12_22;

import java.util.ArrayList;
import java.util.Scanner;

class InputMaxNumber {

	public static void main(String[] args) {
		int num = 0;
		ArrayList<Integer> list = new ArrayList<>(); // 컬렉션 인스턴스 생성
		Scanner sc = new Scanner(System.in);
                // 스캐너 while문 안에 넣게 되면 다른 결과 나옴
		
		System.out.print("정수(-1이 입력될 때까지)>> ");
		
		while (true) {
			// 단어 하나 단위로 숫자 입력받고 저장
			num = sc.nextInt();
			
			if (num == -1) 
				break;
			
			list.add(num); // 사용자가 입력하는 숫자들 저장됨.
		}

			int maxNum = list.get(0); // 그 중 가장 큰 수
			for (int i = 1; i < list.size(); i++) {
				if (maxNum < list.get(i)) 
					maxNum = list.get(i);	
			}
			
			System.out.println("가장 큰 수는 " + maxNum);
		
	}
}



3.로또 프로그램을 작성하시오.(Set 으로)
package java_12_22;

import java.util.HashSet;
import java.util.Set;

public class LottoHashSet {

	public static void main(String[] args) {
		Set<Integer> set = new HashSet<>();

		while (set.size() < 6) {
			set.add((int)(Math.random() * 45) + 1);
		}
		System.out.println(set);
	}
}



4.Set에 대하여 설명하시오.
 Set = 집합
★ 저장 순서가 필요 없음 / 순서 유지 안 됨 (집합이니까!)
★ 데이터 중복 허용 안됨. 


5. (보류)


6.Scanner 클래스를 사용하여 6개 학점('A','B','C','D','F')을 문자로 입력받아 ArrayList에 저장하고, 
ArrayList를 검색하여 학점을 점수(A=4.0, B=3.0, C=2.0, D=1.0, F=0)로 변환하여 
평균을 출력하는 프로그램을 작성하라.

6개의 학점을 빈 칸으로 분리 입력(A/B/C/D/F) >> A C A B F D

2.3333333333333335

<풀이>
package java_12_22;

import java.util.ArrayList;
import java.util.Scanner;

class GradeArrayList {

	public static void main(String[] args) {

		ArrayList<Character> list = new ArrayList<>();
		Scanner sc = new Scanner(System.in);
		System.out.print("6개의 학점을 빈 칸으로 분리 입력(A/B/C/D/F) >> ");

		for (int i = 0; i < 6; i++) {   // 몇 개를 입력하든 앞 6개만 받겠다.
			char ch = sc.next().charAt(0);
			list.add(ch);   // 사용자가 입력한 문자 6개 담음.
		}

		double sum = 0;

		for (int i = 0; i < list.size(); i++) {
			char ch = list.get(i);

			switch (ch) {
			case 'A':
				sum += 4.0;
				break;
			case 'B':
				sum += 3.0;
				break;
			case 'C':
				sum += 2.0;
				break;
			case 'D':
				sum += 1.0;
				break;
			case 'F':
				sum += 0;
				break;
			}
		}

		double avg = sum / list.size();
		System.out.println(avg);
	}
}


7.출력이 아래와 같이 나오도록 하시오(필수)
        HashSet<Num> set = new HashSet<>();
        set.add(new Num(7799));
        set.add(new Num(9955));
        set.add(new Num(7799));

        System.out.println("인스턴스 수: " + set.size());

        for(Num n : set)
            System.out.print(n.toString() + '\t');

        System.out.println();

====출력=====
인스턴스 수: 2
7799	9955

<클래스>
package java_12_22;

class Num {
	private int num;

	public Num(int n) {
		num = n;
	}

	@Override
	public String toString() {
		return String.valueOf(num);
	}

	@Override
	public int hashCode() {
		return num; 
	}

	@Override
	public boolean equals(Object obj) {	
		if (num == ((Num) obj).num)
			return true;
		else
			return false;
	}
}

8.Set 호출되는 원리와 순서를 설명하시오?
<개요> 
Set<E> 인터페이스는 집합이라고 생각하면 되는데.. 
집합에 숫자(인스턴스)를 넣는다고 생각을 해보면, 그 넣는 저장 순서는 유지되지 않고
같은 숫자를 넣으면 중복 저장 되지 않고 그냥 하나의 인스턴스로 본다.
그래서 그 같은 숫자, 즉 동일한 인스턴스의 구분 기준이 중요하다.

equals메소드 hashCode는 메인 클래스의 set.add();가 호출하여 다음 조건을 체크한다.

<동일한 인스턴스 구분 기준>
조건 1. 
내부적으로 equals메소드 호출(함수 오버라이딩 되어있는 메소드)
	public boolean equals(Object obj) -> 문자열 비교
	>> true 이면 조건1 만족.
조건 2. 
public int hashCode( ) 메소드 호출. (해쉬코드는 객체의 주소를 비교한다 보면됨)
	>> 호출 결과가 같으면 조건2까지 만족.

두 조건을 모두 만족하면 동일한 인스턴스로 본다.


<해시코드란?>
해시코드는 캐비넷을 "만드는" 역할을 함. 해시코드 값에 따라 분류를 한다.
(*캐비넷(군집, 집합) 이란? 주소값.)

1. 해당 집합(캐비넷)안에 숫자를 집어넣음
2. 이미 들어와 있는 숫자와 같은 숫자가 들어온 경우.
2-1. 이미 방 만들어져 있는지 체크하고 (군집 체크)
2-2. 해당 군집 내에 있는 요소 체크. 같은 숫자 있는지.
3. 다른 숫자가 들어온 경우 분류 후 저장.



9.아래와 같이 출력되도록 하시오.
        HashSet<Person> hSet = new HashSet<Person>();
        hSet.add(new Person("LEE", 10));
        hSet.add(new Person("LEE", 10));
       	hSet.add(new Person("PARK", 35));
        hSet.add(new Person("PARK", 35));

        System.out.println("저장된 데이터 수: " + hSet.size());
        System.out.println(hSet);
============
저장된 데이터 수: 2
[LEE(10세), PARK(35세)]

<풀이>
package java_12_22;

import java.util.HashSet;

class HashSetPerson {

	public static void main(String[] args) {
		HashSet<Person> hSet = new HashSet<Person>();
		hSet.add(new Person("LEE", 10));
		hSet.add(new Person("LEE", 10));
		hSet.add(new Person("PARK", 35));
		hSet.add(new Person("PARK", 35));

		System.out.println("저장된 데이터 수: " + hSet.size());
		System.out.println(hSet);
	}
}

class Person {
	private String name;
	private int age;

	public Person(String name, int age) {
		this.name = name;
		this.age = age;
	}

	@Override
	public String toString() {
		return name + "(" + age + "세)";
	}

	@Override
	public int hashCode() {
		return age;	
	}

	@Override
	public boolean equals(Object obj) {
		if ((this.age == ((Person) obj).age)&&(this.name == ((Person) obj).name))
			return true;
		else
			return false;
	}

}



▶ 추가 수업 내용

- 이터레이터 = 커서 라고 보면 된다.
- 집합의 공간을 인스턴스 풀이라 보면 되나..?
- set.size 는 인스턴스의 수를 의미함.

- <Swap 알고리즘> 복습
	int a = 1;
	int b = 2;
			// a와 b를 서로 바꿔보자 
	int temp;
	temp = a;
	a = b;
	b = temp;

.... 이걸 사용해서 제네릭 적용하기
private static <T> void swapBox(BoxHW<T> box1, BoxHW<T> box2) {
		T tmp = box1.get();
		box1.set(box2.get());
		box2.set(tmp);
		
		
- 클래스에서 해시코드.. 오버라이딩 안 하면!!! 주소값을 리턴하게 됨. 
오버라이딩 안 하면 메인에서 set.add할 때, 부모에 있는 해시코드를 호출하니까..

- public class LottoHashSet {

	public static void main(String[] args) {
		Set<Integer> set = new HashSet<>();

		while (set.size() < 6) {
			set.add((int)(Math.random() * 45) + 1);
		}
		System.out.println(set);
	}
} 
<결과>
[5, 38, 41, 42, 44, 45]

... 여기서 결괏값에 괄호 나오는 이유는
마지막 프린트함수에 브레이크포인트 찍고 디버깅 모드에서
F5 누르고 누르고 누르면 [] 있는 설명 나옴.... 그냥 그렇게 세팅 돼있음.
-> F5는 함수를 타고 들어가는 원리



