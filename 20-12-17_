# 19~20

1. String 클래스에서 문자열 비교시 equal을 쓰는 이유는?
-Object class(부모)에 있는 String을 자식 클래스에서 equals메소드로 오버라이딩해서 
스트링 내에있는 글자값만 비교. (주소값 비교 아님)
-> 스트링 클래스는 두 인스턴스의 내용을 비교하는 형태로 equals메소드를 오버라이딩 하고있음.


2. shallaw copy, deep copy 의 차이는?

■ Shallaw Copy 
- 원본의 참조값(주소)를 복사해서 결국 같은 번지수를 가리킨다. 
- 동일한 객체를 참조한다.
- 따라서 원본 수정 시 복사본도 수정됨.

■ Deep Copy 
- 원본의 객체 자체를 메모리에 복사해서 새로운 주소를 가진 다른 번지수를 가리킴. 
- 생긴 것만 같은 아예 다른 객체를 참조한다.
- 원본 수정에 영향을 받지 않는다.


3. 금일 배운 Rectangle의 shall copy 와 deep copy 일 때의 그림을 그리시오. (중요)
첨부!


4. 다음 main()이 실행되면 아래 예시와 같이 출력되도록 MyPoint 클래스를 작성하라.
<메인>
public static void main(String [] args) {
	MyPoint p = new MyPoint(3, 50);
	MyPoint q = new MyPoint(4, 50);
	System.out.println(p);
	if(p.equals(q)) System.out.println("같은 점");
	else System.out.println("다른 점");			
}

<결과>
Point(3,50)
다른점

<클래스>
package java_12_17;

class MyPoint {

	int num1, num2;

	public MyPoint(int num1, int num2) {
		this.num1 = num1;
		this.num2 = num2;
	}

	@Override
	public String toString() {
		return ("Point(" + num1 + "," + num2 + ")");
	}
}

-------------------------------------------------------
* java_12_17.MyPoint@28a418fc 
<<- 이렇게 주소값 나오는 건 클래스에서 toString 메소드 오버라이딩 안 해줘서 주소값만 나오는겨.



5. 중심을 나타내는 정수 x, y와 반지름 radius 필드를 가지는 Circle 클래스를 작성하고자 한다. 
생성자는 3개의 인자(x, y, raidus)를 받아 해당 필드를 초기화하고, 
equals() 메소드는 두 개의 Circle 객체의 중심이 같으면 같은 것으로 판별하도록 한다.

public static void main(String[] args) {
	Circle a = new Circle(2, 3, 5); // 중심 (2, 3)에 반지름 5인 원
	Circle b = new Circle(2, 3, 30); // 중심 (2, 3)에 반지름 30인 원
	System.out.println("원 a : " + a);
	System.out.println("원 b : " + b);
	if(a.equals(b))
		System.out.println("같은 원");
	else 
		System.out.println("서로 다른 원");
}

원 a : Circle(2,3)반지름5
원 b : Circle(2,3)반지름30
같은 원

<클래스>
package java_12_17;

public class Circle {
	
	private int x, y, rad;

	public Circle(int x, int y, int rad) {
		this.x = x;
		this.y = y;
		this.rad = rad;
	}

	@Override
	public boolean equals(Object obj) {
		if (this.x == ((Circle) obj).x && this.y == ((Circle) obj).y)
			return true;
		else
			return false;
	}

	@Override
	public String toString() {
		return ("Circle(" + x + "," + y + ")" + "반지름" + rad);
	}

	public int getX() {	//여기부턴 그냥 게터세터
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
	public int getRad() {
		return rad;
	}
	public void setRad(int rad) {
		this.rad = rad;
	}
}




6. 문자열을 입력받아 한 글자씩 회전시켜 모두 출력하는 프로그램을 작성하라.
(클래스로 작성할 필요없이 메인에서 직접 할것)

문자열을 입력하세요. 빈칸이나 있어도 되고 영어 한글 모두 됩니다.
I Love you
 Love youI
Love youI 
ove youI L
ve youI Lo
e youI Lov
 youI Love
youI Love 
ouI Love y
uI Love yo
I Love you

[Hint] Scanner.nextLine()을 이용하면 빈칸을 포함하여 한 번에 한 줄을 읽을 수 있다.

<메인>
package java_12_17;

import java.util.Scanner;

public class ILoveYou {

	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in);

		System.out.println("문자열을 입력하세요. 빈칸이 있어도 되고 영어 한글 모두 됩니다.");
		System.out.print("입력 >> ");
		String input = sc.nextLine();

		for (int i = 0; i < input.length(); i++) {
			System.out.print(input.substring(i));
			System.out.println(input.substring(0, i));
		}
		sc.close();

	}

}



7. 래퍼 클래스란 무엇인가?
- Wrapper Class
- 기본 자료형 8개의 값을 인스턴스로 감싸는 목적의 클래스
- 즉, 기본형 8개를 클래스로 표현한 것



8. auto unboxing 이란?
- 래퍼 클래스의 두 가지 기능 중 하나인 Unboxing 이 자동으로 진행 되는 것.
- 기본 자료형 값이 와야 할 위치에 인스턴스가 오면 자동으로 언박싱 진행된다.



★9. 다음 조건을 만족하는 클래스 Person을 구현하여 테스트하는 프로그램을 작성하시오.(필수)

- 클래스 Person은 이름을 저장하는 필드 구성

- 클래스 Person은 상위 클래스 Object의 메소드 equals()를 오버라이딩하여 
  이름이 같으면 true를 반환하는 메소드 구현

- 다음과 같은 소스로 클래스 Person을 점검

Person p1 = new Person("홍길동");
System.out.println(p1.equals(new Person("홍길동")));
System.out.println(p1.equals(new Person("최명태")));

<클래스 + 메인>
package java_12_17;

class Person {
	private String name;

	public Person(String name) {
		this.name = name;
	}

	@Override
	public boolean equals(Object obj) {
		if (this.name == ((Person) obj).name)
			return true;
		else
			return false;
	}
}

public class PersonMain {

	public static void main(String[] args) {
  
		Person p1 = new Person("홍길동");
		System.out.println(p1.equals(new Person("홍길동")));
		System.out.println(p1.equals(new Person("최명태")));
	}
}

<결과>
true
false


★10. 다음 조건을 만족하는 클래스 String의 객체 이용 프로그램을 작성하여 
메소드 equals()와 연산자 ==의 차이를 비교 설명하시오.(필수) 

- 메소드 equals()와 비교 연산자 ==의 차이를 다음 소스로 점검

public static void main(String[] args) {
  String s1 = new String("java");
  String s2 = new String("java");
  String s3 = s2;

  System.out.println(s1 == s2);   // 같지 않다
  System.out.println(s1.equals(s2));   // 같다
  System.out.println(s2 == s3);   // 같다
  System.out.println(s2.equals(s3));   // 같다
}

<결과>
false
true
true
true

<이유>
- 연산자 == : 참조 대상(주소)을 비교한다.
- 메소드 equals() : 두 인스턴스의 내용을 비교한다.


11. 다음 조건을 만족하도록 오늘의 정보를 출력하는 프로그램을 작성하시오.

- 클래스 Calendar의 객체의 다음 메소드를 사용하며

 * get(Calendar.DAY_OF_WEEK_IN_MONTH) : 달에서 요일의 횟수 반환
 * get(Calendar.DAY_OF_WEEK) : 요일을 반환, 1이 일요일
 * get(Calendar.WEEK_OF_MONTH) : 월의 주 횟수를 반환
 * get(Calendar.DAY_OF_YEAR) : 해의 날짜를 반환
 * get(Calendar.WEEK_OF_YEAR) : 해의 주 횟수를 반환

- 다음과 같이 출력되도록 한다.

오늘은 2012년 6월 17일 일요일입니다.
이 달의 3번째 일요일입니다.
이 달의 4번째 주입니다.
이 해의 169일입니다.
이 해의 25번째 주입니다. 


