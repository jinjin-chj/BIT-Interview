#17-18

1.Maker 인터페이스에 대하여 설명하시오.



2.추상클래스에 대하여 설명하시오.



3.추상클래스와 인터페이스의 차이는?



4.에러와 예외의 차이는?



5.unchecked 와 cheked 예외의 차이는?



6.예외처리 UML를 그리시오.



7.사칙연산 계산기를 아래의 조건으로 짜시오.  // 했는데 소숫점 이하 출력 안 됨..
-interface 를 활용할것
-예외처리 메커니즘을 적용할것.

<클래스>
package java_12_15;

interface ICalculator {

	void Calculator(int x, char op, int y);

	void run();
}

class Calculator implements ICalculator {
	private int x, y;
	private char op;

	@Override
	public void Calculator(int x, char op, int y) {
		this.x = x;
		this.op = op;
		this.y = y;
	}

	@Override
	public void run() {

		double result = 0.0;

		switch (op) {
		case '+': {
			result = x + y;
			break;
		}
		case '-': {
			result = x - y;
			break;
		}
		case '*': {
			result = x * y;
			break;
		}
		case '/': {
			result = (double)(x / y);
			break;
		}
		}
		System.out.println(x + " " + op + " " + y + " = " + (double)result);

	}

	public int getX() {
		return x;
	}

	public void setX(int x) {
		this.x = x;
	}

	public int getY() {
		return y;
	}

	public void setY(int y) {
		this.y = y;
	}

	public char getOp() {
		return op;
	}

	public void setOp(char op) {
		this.op = op;
	}

}

<메인>
package java_12_15;
// 소수점 이하 출력이 안 됨.....!!!!!!!!!
import java.util.Scanner;

public class CalMain {

	public static void main(String[] args) {
		Scanner sc = null;
		ICalculator cal = new Calculator();

		while (true) {
			sc = new Scanner(System.in);
			try {
				System.out.println("계산기 시작 (숫자 연산자 숫자)");

				System.out.print("입력: ");

				int x = sc.nextInt();
				char op = sc.next().charAt(0);
				int y = sc.nextInt();

				System.out.print("계산: ");

				cal.Calculator(x, op, y);
				cal.run();

			} catch (Exception e) {
				System.out.println(e.getStackTrace());

			}
			System.out.println("계속 하시겠습니까? (y/n)");

			char anwser = sc.next().charAt(0);
			if (anwser == 'Y' || anwser == 'y')
				continue;
			else
				break;
		}
		sc.close();
		System.out.println("프로그램 종료.");
	}

}

<출력>
계산기 시작 (숫자 연산자 숫자)
입력: 5 - 2
계산: 5 - 2 = 3.0
>> 계속 하시겠습니까? (y/n)
y
계산기 시작 (숫자 연산자 숫자)
입력: 4 / 0
계산: [Ljava.lang.StackTraceElement;@7291c18f
>> 계속 하시겠습니까? (y/n)
n
프로그램 종료.


8.다음 Stack 인터페이스를 상속받아 실수를 저장하는 StringStack 클래스를 구현하라.(구현할 수 있도록 할것)

interface Stack {
   int length();       // 현재 스택에 저장된 개수 리턴
   int capacity();    // 스택의 전체 저장 가능한 개수 리턴
   String pop();     // 스택의 톱(top)에 실수 저장
   boolean push(String val); // 스택의 톱(top)에 저장된 실수 리턴   // 스택에서,, 벽돌 하나 쌓는 개념
}
그리고 다음 실행 사례와 같이 작동하도록 StackApp 클래스에 main() 메소드를 작성하라.

총 스택 저장 공간의 크기 입력 >> 3
문자열 입력 >> hello
문자열 입력 >> sunny
문자열 입력 >> smile
문자열 입력 >> happy
스택이 꽉 차서 푸시 불가!
문자열 입력 >> 그만
스택에 저장된 모든 문자열 팝 : smile sunny hello 


9.철수 학생은 다음 3개의 필드와 메소드를 가진 4개의 클래스 Add, Sub, Mul, Div를 작성하려고 한다.

- int 타입의 a, b 필드: 2개의 피연산자
- void setValue(int a, int b): 피연산자 값을 객체 내에 저장한다.
- int calculate(): 클래스의 목적에 맞는 연산을 실행하고 결과를 리턴한다.

생각해보니, Add, Sub, Mul, Div 클래스에 공통된 필드와 메소드가 존재하므로 
새로운 추상 클래스 Calc를 작성하고 Calc를 상속받아 만들면 되겠다고 생각했다. 
그리고 main() 메소드에서 다음 실행 사례와 같이 2개의 정수와 연산자를 입력받은 후,
Add, Sub, Mul, Div 중에서 이 연산을 처리할 수 있는 객체를 생성하고 setValue() 와 calculate()를 호출하여 
그 결과 값을 화면에 출력하면 된다고 생각하였다. 철수처럼 프로그램을 작성하라.

두 정수와 연산자를 입력하시오 >> 5 7 +



10~11. 다음 연습문제 [7-22,23] 번을 푸시오.

[7-22] 아래는 도형을 정의한 Shape클래스이다.
이 클래스를 조상으로 하는 Circle클래스와 Rectangle클래스를 작성하시오. 
이 때, 생성자도 각 클래스에 맞게 적절히 추가해야 한다.

(1) 클래스명 : Circle
조상클래스 : Shape
멤버변수 : double r - 반지름

(2) 클래스명 : Rectangle
조상클래스 : Shape
멤버변수 : double width - 폭
double height - 높이

메서드 :
1. 메서드명 : isSquare
기 능 : 정사각형인지 아닌지를 알려준다. 
반환타입 : boolean
매개변수 : 없음

[7-23] 문제7-22에서 정의한 클래스들의 면적을 구하는 메서드를 작성하고 테스트 하시오.
1. 메서드명 : sumArea
기 능 : 주어진 배열에 담긴 도형들의 넓이를 모두 더해서 반환한다.
반환타입 : double
매개변수 : Shape[] arr

=======================================================================================

<클래스>
package java_12_14;
// 연습 문제 7-22, 23번
abstract class Shape {	
	
	Point p;	// 이거 왜 변수 선언했는지 모름.

	Shape() {
		this(new Point(0, 0));
	}

	Shape(Point p) {
		this.p = p;
	}

	abstract double calcArea(); // 도형의 면적을 계산해서 반환하는 메서드

	Point getPosition() {
		return p;
	}

	void setPosition(Point p) {
		this.p = p;
	}
}

class Point {  // 이거 왜 있냐고...
	int x;
	int y;

	Point() {
		this(0, 0);
	}

	Point(int x, int y) {
		this.x = x;
		this.y = y;
	}

	public String toString() {
		return "[" + x + "," + y + "]";
	}

}

class Circle extends Shape {
	double r = 0;
	final double PI = 3.14;

	// 밑에 이거 솔직히 메인에서 필요한 함수라 만들었는데 무슨 기능인지 모름.
	Circle(double r) {
		this(new Point(0, 0), r);
	}

	Circle(Point p, double r) {
		super(p);
		this.r = r;

	}

	@Override	// 얘는 왜 위에다 쓰면 에러가 나는가.

	double calcArea() {
		return r * r * PI;
	}
}

class Rectangle extends Shape {

	double width, height = 0;

	Rectangle(double width, double height) {
		this(new Point(0, 0), width, height);
	}

	Rectangle(Point p, double width, double height) {
		super(p);
		this.width = width;
		this.height = height;
	}

	@Override
	double calcArea() {
		return width * height;
	}

	boolean isSquare() {
		return (width - height == 0 && width * height != 0);

	}

}



<메인>
package java_12_14;

class ShapeMain {

	public static void main(String[] args) {

		Shape[] arr = { new Circle(5.0), new Rectangle(3, 4), 
				new Circle(1) };

		System.out.println("면적의 합: " + sumArea(arr) + '\n');

		Circle cir = new Circle(5.0);
		System.out.println("삼각형 넓이: " + cir.calcArea());

		Rectangle rec = new Rectangle(3,4);
		System.out.println("사각형 넓이: " + rec.calcArea());
		System.out.println("사각형은 정사각형인가? " + rec.isSquare());

	}

	private static double sumArea(Shape[] arr) {
		double sum = 0;
		for (int i = 0; i < arr.length; i++) {
			sum += arr[i].calcArea();

		}
		return sum;
	}
}

<출력>  // 면적 합 왜 소숫점 둘째자리까지만 나오는지 물어보기.
면적의 합: 93.64

삼각형 넓이: 78.5
사각형 넓이: 12.0
사각형은 정사각형인가? false

