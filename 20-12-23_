#23~24


1. "그만"이 입력될 때까지 나라 이름과 인구를 입력받아 저장하고, 
다시 나라 이름을 입력받아 인구를 출력하는 프로그램을 작성하라. 다음 해시맵을 이용하라.

나라 이름과 인구를 입력하세요.(예: Korea 5000)

나라 이름, 인구 >> Korea 5000

나라 이름, 인구 >> USA 1000000

나라 이름, 인구 >> Swiss 2000

나라 이름, 인구 >> France 3000

나라 이름, 인구 >> 그만

인구 검색 >> France

France의 인구는 3000

인구 검색 >> 스위스

스위스 나라는 없습니다.

인구 검색 >> 그만



<풀이>

package java_12_23;

import java.util.HashMap;
import java.util.Scanner;

class CountryHashMap {
	public static void main(String[] args) {
   
		String country;
		Integer population;

		HashMap<String, Integer> map = new HashMap<>();
		Scanner sc = new Scanner(System.in);
		System.out.println("나라 이름과 인구를 입력하세요.(예: Korea 5000)");

		while (true) {
			System.out.print("나라 이름, 인구 >> ");
			country = sc.next();

			if (country.equals("그만"))
				break;
           		 // 얘를 위에다 쓰면 그만 이후에도 계속 입력값을 대기하고 있으니까 다음 와일문이 안나오지.
			population = sc.nextInt();
			map.put(country, population);
		}
      
		while (true) {
			System.out.print("인구 검색 >> ");
			country = sc.next();
         
			if (country.equals("그만"))
				break;
            
			Integer num = map.get(country);

			if (num == null)
				System.out.println(country + " 나라는 없습니다.");
			else
				System.out.println(country + "의 인구는 " + num);
		}
		sc.close();
		System.out.println("프로그램 종료.");
	}
}




2. 하나의 학생 정보를 나타내는 Student 클래스에는 (이름, 학과, 학번, 학점 평균)을 저장하는 필드가 있다.
(1) 학생마다 Student 객체를 생성하고 4명의 학생 정보를 ArrayList<Student> 컬렉션에 저장한 후에, 
ArrayList<Student>의 모든 학생(4명) 정보를 출력하고 학생 이름을 입력받아 
해당 학생의 학점 평균을 출력하는 프로그램을 작성하라.

학생 이름, 학과, 학번, 학점평균 입력하세요.

>> 황기태, 모바일, 1, 4.1

>> 이재문, 안드로이드, 2, 3.9

>> 김남윤, 웹공학, 3, 3.5

>> 최찬미, 빅데이터, 4, 4.25

----------------------------------

이름: 황기태

학과: 모바일

학번: 1

학점평균: 4.1

----------------------------------

이름: 이재문

학과: 안드로이드

학번: 2

학점평균: 3.9

----------------------------------

이름: 김남윤

학과: 웹공학

학번: 3

학점평균: 3.5

----------------------------------

이름: 최찬미

학과: 빅데이터

학번: 4

학점평균: 4.25

----------------------------------

학생 이름 >> 최찬미

최찬미, 빅데이터, 4, 4.25

학생 이름 >> 이재문

이재문, 안드로이드, 2, 3.9

학생 이름 >> 그만



<풀이> - 내가 한 거.. 
// 쉼표 없애는 법 모름, 
// 학생 이름 입력하면 해당 학생의 정보가 나와야 하는데 그냥 전체 학생의 학점 평균 출력됨.

package java_12_23;

import java.util.ArrayList;
import java.util.Scanner;

class Student {
	private String name, dep, idNum, avg;

	public String getName() {
		return name;
	}

	public String getDep() {
		return dep;
	}

	public String getIdNum() {
		return idNum;
	}

	public String getAvg() {
		return avg;
	}

	Student(String name, String dep, String idNum, String avg) {
		this.avg = avg;
		this.dep = dep;
		this.idNum = idNum;
		this.name = name;
	}
	
	@Override
	public String toString() {
		return "이름: " + getName() +'\r' +"학과: " + getDep()
		+'\r'+"학번: " + getIdNum()+'\r'+"학점평균: " + getAvg()+'\r';
	}
}

class StudentArrayList {
	public static void main(String[] args) {
		ArrayList<Student> list = new ArrayList<>();
		Scanner sc = new Scanner(System.in);
		System.out.println("학생 이름 학과 학번 학점평균 입력하세요.");
		
		// 배열에 저장
		Student[] student = new Student[4];
		for (int i = 0; i < student.length; i++) {
			System.out.print(">> ");
			String name = sc.next();
			String dep = sc.next();
			String idNum = sc.next();
			String avg = sc.next();

			student[i] = new Student(name, dep, idNum, avg);
			list.add(student[i]); // 저장 완료!
		}
		System.out.println("-------------------------------");
		// 전체 출력 부분
		for (int i = 0; i < list.size(); i++) {
			System.out.print(list.get(i));
			System.out.println("-------------------------------");
		}
		// 이름 입력받고 평균 출력하는 부분
		while (true) {
			System.out.print("학생 이름 >> ");
			String name = sc.next();
			
			if (name.equals("그만"))
				break;
			for (int i = 0; i < list.size(); i++) {
				Student who = list.get(i);
				System.out.println(who.getAvg());
			}
		}
	}
}



<풀이> - 쌤이랑 한 거!!
package java_12_23;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;
import java.util.StringTokenizer;

class Student1 {
	private String name, major, sNumber;
	private double grade;

	Student1(String name, String major, String sNumber, double grade) {
		this.grade = grade;
		this.major = major;
		this.name = name;
		this.sNumber = sNumber;
	}

	public String getName() {
		return name;
	}

	public String getMajor() {
		return major;
	}

	public String getsNumber() {
		return sNumber;
	}

	public double getGrade() {
		return grade;
	}
}

public class StudentWithT {
	final static int STUDENT_NUM = 4;

	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in);

		try {
			ArrayList<Student1> list = new ArrayList<>();
			System.out.println("학생 이름 학과 학번 학점평균 입력하세요.");

			for (int i = 0; i < STUDENT_NUM; i++) {
				System.out.print(">> ");
				String text = sc.nextLine(); // 한 줄 전체 받기

				StringTokenizer st = new StringTokenizer(text, ",");
				String name = st.nextToken().trim(); // trim은 양 옆 공백을 제거한다.
				String major = st.nextToken().trim();
				String sNumber = st.nextToken().trim();
				double grade = Double.parseDouble(st.nextToken().trim()); // parseDouble 뭔지...

				Student1 student = new Student1(name, major, sNumber, grade); // 여기까지 객체생성
				list.add(student); // 생성한거 리스트에 넣음(저장)

			}

			Iterator<Student1> it = list.iterator();

			while (it.hasNext()) {
				Student1 student = it.next();
				System.out.println("-------------------------------");
				System.out.println("이름: " + student.getName());
				System.out.println("학과: " + student.getMajor());
				System.out.println("학번: " + student.getsNumber());
				System.out.println("학점 평균: " + student.getGrade());

			}
			System.out.println("-------------------------------");

			while (true) {
				System.out.print("학생 이름 >> ");
				String name = sc.nextLine();

				if (name.equals("그만"))
					break;

				for (int i = 0; i < list.size(); i++) {
					Student1 student = list.get(i);

					if (student.getName().trim().equals(name.trim())) { // trim 넣는건 혹시 유저가 공백 입력하면 공백은 짤라라.
						System.out.print(student.getName() + ", ");
						System.out.print(student.getMajor() + ", ");
						System.out.print(student.getsNumber() + ", ");
						System.out.println(student.getGrade());
						break;

					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("프로그램 오류입니다.");
		}

		System.out.println("프로그램 종료.");
		sc.close();
	}
}




3. (2) ArrayList<Student> 대신, HashMap<String, Studnet> 해시맵을 이용하여 다시 작성하라. 
해시맵에서 키는 학생 이름으로 한다.

package java_12_23;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Scanner;
import java.util.Set;
import java.util.StringTokenizer;

class Student2 {
	private String name, major, sNumber;
	private double grade;

	Student2(String name, String major, String sNumber, double grade) {
		this.grade = grade;
		this.major = major;
		this.name = name;
		this.sNumber = sNumber;
	}

	public String getName() {
		return name;
	}

	public String getMajor() {
		return major;
	}

	public String getsNumber() {
		return sNumber;
	}

	public double getGrade() {
		return grade;
	}
}

public class StudentHashMapWithT {
	final static int STUDENT_NUM = 4;

	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in);

		try {
			HashMap<String, Student2> map = new HashMap<>();
			System.out.println("학생 이름 학과 학번 학점평균 입력하세요.");

			for (int i = 0; i < STUDENT_NUM; i++) {

				System.out.print(">> ");
				String text = sc.nextLine(); // 한 줄 전체 받기
				StringTokenizer st = new StringTokenizer(text, ",");
				String name = st.nextToken().trim(); // trim은 양 옆 공백을 제거한다.
				String major = st.nextToken().trim();
				String sNumber = st.nextToken().trim();
				double grade = Double.parseDouble(st.nextToken().trim()); 
				// parseDouble: 입력받은 String 값을 double로 변환시켜주는 메소드
				// 처음에 text를 nextLine으로 받아서 라인 전체가 스트링으로 들어감. 그래서 후 변환이 필요했음.

				Student2 student = new Student2(name, major, sNumber, grade); // 여기까지 객체생성
				map.put(name, student); // 생성한거 리스트에 넣음(저장)

			}
			Set<String> key = map.keySet(); // 해시맵 info에 있는 모든 키 Set 컬렉션으로 리턴
			Iterator<String> it = key.iterator(); // Set을 순차검색하는 이터레이터 리턴

			while (it.hasNext()) {
				String name = it.next();
				Student2 student = map.get(name); // 이름을 키로 하여 객체를 얻는다.
				System.out.println("-------------------------------");
				System.out.println("이름: " + student.getName());
				System.out.println("학과: " + student.getMajor());
				System.out.println("학번: " + student.getsNumber());
				System.out.println("학점 평균: " + student.getGrade());		

			}
			System.out.println("-------------------------------");

			while (true) {
				System.out.print("학생 이름 >> ");
				String name = sc.nextLine();

				if (name.equals("그만"))
					break;
				Student2 student = map.get(name);

				if (student == null) {
					System.out.println("해당 학생은 없음");
				} else {
					System.out.print(student.getName() + ", ");
					System.out.print(student.getMajor() + ", ");
					System.out.print(student.getsNumber() + ", ");
					System.out.println(student.getGrade());
					break;

				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("프로그램 오류입니다.");
		}

		System.out.println("프로그램 종료.");
		sc.close();
	}
}




4. 도시 이름, 위도, 경도 정보를 가진 Location 클래스를 작성하고, 
도시 이름을 '키'로 하는 HashMap<String, Location> 컬렉션을 만들고, 
사용자로부터 입력 받아 4개의 도시를 저장하라. 그리고 도시 이름으로 검색하는 프로그램을 작성하라.

도시, 경도, 위도를 입력하세요.

>> 서울, 37, 126

>> LA, 34, -118

>> 파리, 2, 48

>> 시드니, 151, -33

----------------------------------

서울 37 126

LA 34 -118

파리 2 48

시드니 151 -33

----------------------------------

도시 이름 >> 피리

피리는 없습니다.

도시 이름 >> 파리

파리 2 48

도시 이름 >> 그만


<풀이> // 내가 한거!! 미완성
package java_12_23;

import java.util.HashMap;
import java.util.Scanner;

class Location {
	String city, lat, lng;

	Location(String city, String lat, String lng) {
		this.city = city;
		this.lat = lat;
		this.lng = lng;
	}

	void Print() {
		System.out.println(city + '\t' + lat + '\t' + lng);
	}
}

class LocationHashMap {
	public static void main(String[] args) {
		String city, lat, lng; // 원래는 이거 없어도 돌아가야돼
		HashMap<String, Location> map = new HashMap<>();

		Scanner sc = new Scanner(System.in);
		System.out.println("도시, 경도, 위도를 입력하세요.");

		for (int i = 0; i < 4; i++) {
			System.out.print(">> ");
			city = sc.next();
			lat = sc.next();
			lng = sc.next();

			Location loc = new Location(city, lat, lng);
			map.put(city, loc);
		}
		for (int i = 0; i < map.size(); i++) {
			System.out.print(map.get(i));
		}

	}	// 미완!!

}

<풀이> with T!!
package java_12_23;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Scanner;
import java.util.Set;
import java.util.StringTokenizer;

class Location {
	private String city, lat, lng;

	public String getCity() {
		return city;
	}

	public String getLat() {
		return lat;
	}

	public String getLng() {
		return lng;
	}

	Location(String city, String lat, String lng) {
		this.city = city;
		this.lat = lat;
		this.lng = lng;
	}
}

class LocationHashMap {
	final static int INPUT_NUM = 4;

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		HashMap<String, Location> map = new HashMap<>();

		System.out.println("도시, 경도, 위도를 입력하세요.");

		try {
			for (int i = 0; i < INPUT_NUM; i++) {
				System.out.print(">> ");
				String text = sc.nextLine();

				StringTokenizer st = new StringTokenizer(text, ",");
				String city = st.nextToken().trim();
				String lat = st.nextToken().trim();
				String lng = st.nextToken().trim();

				Location loc = new Location(city, lat, lng);
				map.put(city, loc);
			}

			Set<String> key = map.keySet();
			Iterator<String> it = key.iterator();

			System.out.println("-------------------------------");
			while (it.hasNext()) {
				String city = it.next();
				Location loc = map.get(city);
				System.out.println(loc.getCity() + " " + loc.getLat() + " " + loc.getLng());
			}
			System.out.println("-------------------------------");

			while (true) {
				System.out.print("도시 이름 >> ");
				String city = sc.nextLine();

				if (city.equals("그만"))
					break;
				Location loc = map.get(city);

				if (loc == null) {
					System.out.println(city + "는 없습니다.");
				} else {
					System.out.println(loc.getCity() + " " + loc.getLat() + " " + loc.getLng());

				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("프로그램 오류입니다.");
		}
		System.out.println("프로그램 종료.");
		sc.close();
	}
}


5. 이름과 학점(4.5만점)을 5개 입력받아 해시맵에 저장하고, 
장학생 선발 기준을 입력 받아 장학생 명단을 출력하라.

미래장학금관리시스템입니다.

이름과 학점 >> 적당히 3.1

이름과 학점 >> 나탈락 2.4

이름과 학점 >> 최고조 4.3

이름과 학점 >> 상당히 3.9

이름과 학점 >> 고득점 4.0

장학생 선발 학점 기준 입력 >> 3.2

장학생 명단 : 최고조 상당히 고득점 

[Hint] HashMap의 전체 요소를 검색하여 학점이 3.2 이상인 학생을 알아내야 한다.

<풀이>

package java_12_23;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Scanner;
import java.util.Set;

public class ScholarshipHashMap {
	final static int INPUT_NUM = 5;

	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in);

		HashMap<String, Double> map = new HashMap<>();
		System.out.println("미래 장학금 관리시스템입니다.");

		for (int i = 0; i < INPUT_NUM; i++) {
			System.out.print("이름과 학점 >> ");
			String name = sc.next();
			double grade = sc.nextDouble();
			map.put(name, grade);
		}
		System.out.print("장학생 선발 학점 기준 입력 >> ");
		double cutline = sc.nextDouble();
		System.out.print("장학생 명단: ");
		Set<String> set = map.keySet();
		Iterator<String> it = set.iterator();

		while (it.hasNext()) {
			String name = it.next();
			double grade = map.get(name);
			if (grade > cutline) {
				System.out.print(name + " ");
			}
		}
		System.out.println();
		sc.close();
	}
}



6. 큐와 스택에 대하여 설명하시오.(필수)
스택 --- LIFO (last in first out)
큐   --- FIFO (first in first out)	// 선입선출,,


7. Map 에 대하여 설명하시오.


8. 아래의 TreeMap의 Value를 확인 하기 위한 소스를 짜시오.(필수)
   TreeMap<Integer, String> map = new TreeMap<>();
   map.put(45, "Brown");
   map.put(37, "James");
   map.put(23, "Martin");
   
<풀이>
package java_12_23;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;

class HashMapIteration {

	public static void main(String[] args) {
		HashMap<Integer, String> map = new HashMap<>();
		
		map.put(45, "Brown");
		map.put(37, "James");
		map.put(23, "Martin");

		// Key만 담고 있는 컬렉션 인스턴스 생성
		Set<Integer> ks = map.keySet();

		// 전체 Key 출력 (for-each 기반)
		for (Integer n : ks)
			System.out.print(n.toString() + '\t');
		System.out.println();

		// 전체 Value 출력 (for-each 기반)
		for (Integer n : ks)
			System.out.print(map.get(n).toString() + '\t');
		System.out.println();

		// 전체 Value 출력 (반복자 기반)
		for (Iterator<Integer> itr = ks.iterator(); itr.hasNext();)
			System.out.print(map.get(itr.next()) + '\t');
		System.out.println();
	}
}


   
9. 아래의 IntegerComparator를 내림차순 정렬이 되게끔 구현하시오.
class ComparatorIntegerDemo {
    public static void main(String[] args) {
        TreeSet<Integer> tr = new TreeSet<>(new IntegerComparator());
        tr.add(30);
        tr.add(10);    
        tr.add(20);        
        System.out.println(tr);	
    }
}

<풀이>
package java_12_23;

import java.util.Comparator;
import java.util.TreeSet;

class ComparatorIntegerDemo {
	public static void main(String[] args) {
		
		TreeSet<Integer> tr = new TreeSet<>(new IntegerComparator());
		tr.add(30);
		tr.add(10);
		tr.add(20);
		System.out.println(tr);
	}
}

class IntegerComparator implements Comparator<Integer> {
	@Override
	public int compare(Integer o1, Integer o2) {
		return o2.intValue() - o1.intValue();
	}
}


10. Objects.hash의 용도와 사용법은?

(추가) 
public static int hash(Object...values)
// java.util.Objects 에 정의된 메소드 , 전달된 전달된 인자 기반의 해쉬 값 반환


@Override
public int hashCode() {
	return Objects.hash(model, color); 
}
// 전달인자 model, color 기반 해쉬 값 반한
// 전달된 인자를 모두 반영한 해쉬 값을 반환

