# 10강-11강

1.인스턴스 함수안에 스태틱 변수와 함수가 올 수 있는 이유는?
- 메모리에 올릴 때, 이미 인스턴스 함수/변수 메모리가 형성이 되어 있기 때문에 스테틱 변수/함수 올 수 있음
but, 스테틱 함수에는 인스턴스 라면이 올 수 없다. 에러남.

=> 객체 생성 영역 3가지
  AAA aaa = new AAA; 에서
  1) M.A(Method Area): 에 AAA에 대한 정보를 올림. 그럼 컴파일러가 AAA.class를 싹 스캔하면서 static이 있는지 체크함. 
  2) Call Stack: aaa를 1)에서 만든 방에 넣음.
  3) heap: 인스턴스 변수 생성 (void int...) 
  
  ~ 이 과정에서 ~
  스테틱 함수에서 인스턴스 라면을 선언하면,
  heap과정에서 생성되는 인스턴스 변수보다 스테틱이 먼저 메모리에 올라오기 때문에 불가능함.
  -> 인스턴스 함수는 객체생성(new)할 때 생기는데,
  스테틱은 객체생성(new)하기 전에 올려서 안됨.
  즉, >> 메모리의 생성 시기가 다름.
  
  
2.메소드 오버로딩이란? <!중요!>
: Method Overloading
- 같은 함수 이름으로 매개 변수의 타입과 갯수를 달리해서 함수를 만드는 것.
(= '동일한 이름'으로 다양한 매개변수와 다양한 리턴타입의 여러 메소드를 정의하는 것.)

- 호출된 메소드를 찾을 때 참조하게 되는 두 가지 정보
  1) 메소드명
  2) 메소드 매개변수 정보 (변수의 갯수, 데이터타입(형))
  cf. 리턴타입과는 관계 없음
 
 - 메소드 오버로딩이 필요한 이유?
 인캡슐레이션, 사용자가 사용하기 쉽게 캡슐화를 시켜놓은 것.
 단, 명확한 목적 하에서 오버로딩 시켜야 함.


3.메소드 오버로딩을 적용한 대표적인 함수는?
println();
-> 'println' 이라는 같은 이름으로 다른 데이터타입(String, int, double...)이 들어감.

(추가)
이미 각각의 타입으로 오버로딩 되어서 코딩이 되어 있기 때문에 사용할 수 있는 것. 
사용자가 사용하기 쉽게 encapsulation(캡슐화) 되어 있기 때문에 이렇게 오버로딩 되어 있는 것이 더 좋다. 
(예를 들면 printString, printchar...이런 방법 보다) 
어떤 데이터 타입이 와도 같은 기능을 하게될 때는 함수 오버 로딩을 적용하는 것이 좋다.


4.this 함수에 대하여 설명하시오.
this.kor = kor;
용도 1) 다른 생성자를 호출하는 함수로 쓰일 때
      this(rnum, 0); -> 중복된 코드를 줄이는 효과
     2) 인스턴스 변수의 접근을 위한 객체로 쓰일 때
      this.kor; -> 객체 자기 자신을 가리킨다... 어디서든 나 "그" kor 맞아! 하는 느낌.
(추가)
 class Person {
	private int regiNum; // 주민등록 번호
	private int passNum; // 여권 번호

	Person(int rnum, int pnum) { //생성자 함수
		regiNum = rnum;
		passNum = pnum;
	}

   	Person(int rnum) { //오버로딩
 	//regiNum = rnum;   //원래 코드
	 //passNum = 0;

	this(rnum, 0);    //어떤 함수를 호출한걸까? 
	}

/*
위에있는 생성자함수를 호출한 것이다.(가능한 것은 그거밖에 없음)
= rnum과 0을 인자로 받는 오버로딩 된 다른 생성자 호출(중복된 코드를 줄이는 효과!)
*/
   
 ...
	}	
}

5.this란 무엇인가?
상기 용도2)에 해당.
(추가)
this. -> 인스턴스 변수와 파라미터 이름이 같을 때 구분하기 위해 사용


6-1. 스트링 객체를 생성하는 2가지 방법은?
  1) String str1 = "The Best String";  // 쌍따옴표 사용 바로 집어넣기
  2) String str3 = new String("Simple String");    // new를 이용한 객체 생성
  but, 두 방법에는 차이가 있다. (6-2에서)

6-2. 아래의 결과를 예측하고,이유를 설명하시오.
      String str1 = "Simple String";
      String str2 = "Simple String";
   
      String str3 = new String("Simple String");
      String str4 = new String("Simple String");
   
      if(str1 == str2)
         System.out.println("str1과 str2는 동일 인스턴스 참조");
      else
         System.out.println("str1과 str2는 다른 인스턴스 참조");
   
      if(str3 == str4)
         System.out.println("str3과 str4는 동일 인스턴스 참조");
      else
         System.out.println("str3과 str4는 다른 인스턴스 참조");

<결과>
str1과 str2는 동일 인스턴스 참조
str3과 str4는 다른 인스턴스 참조

<이유>
1) str1과 str2는 동일 주소를 사용한다.
-> 쌍 따옴표 안은 문자열 상수(리터럴)인데, 컴파일 될 때 쌍따옴표 안의 문자열이 대소문자 모두 동일하면
instance pool이라는 정해진 방에 리터럴을 집어넣어버린다. 
이때, 메모리 절약을 위해 어차피 같은 리터럴 2개 중 1개만 집어넣음.
즉, 쌍따옴표 안에 대소문자까지 같은 문자열이 오면 동일한 주소를 사용함.
cf. 만약 두 문자열의 대소문자가 다르다면(코드값이 다르기 때문에) 
	각각 다른 인스턴스 참조하게 됨. (즉, 두개의 다른 리터럴)

2) str3과 str4는 다른 주소를 사용한다.
-> 데이터 타입이 각각 str3, str4인 왼쪽 방(객체)를 생성한다. 그 뒤, 쌍따옴표 안의 문자열인 "Simple String" 이라는
char형 13글자가 배열된 1000번지~1026번지와 2000번지~2026번지를 각각 생성.(유니코드;1글자당2바이트*13글자=26바이트)
즉, 각각 다른 두개의 주소가 생성됨. 

* (str1 == str3)?
-> 둘은 아예 다른 주소를 사용하므로 다른 인스턴스 참조.
-> 오로지 문자열 내용만 비교하고 싶다면? 
  if(str1.equals(str3))와 같이 equals 활용.


7.immutable 에 대하여 설명하시오.
Immutable instance : 불변 객체
- String instance는 불변 객체이다. 따라서, 생성되는 인스턴스의 수를 "최소화"해야 함.
-   String s = "hello";		// 이 문자열 자체가 불변.
		s = s + "hello2";
		System.out.println(s);	
		// 이때 println(s)에는 "hello" + "hello2"가 아닌,
      새로운 "hellohello2"라는 새로운 메모리를 올린다.
- 장점: 코스트(시간) 절약 가능.
      

8. 사용자로부터 받은 문자열(영문으로)에서 자음과 모음 개수를 계산하는 프로그램을 작성하라.


9. 사용자로부터 키를 입력받아서 표준 체중을 계산한 후에 사용자의 체중과 비교하여 저체중인지, 
표준인지, 과체중인지를 판단하는 프로그램을 작성하라. 표준 체중 계산식은 다음을 사용하라.
[ 표준체중 = ( 키 - 100 ) * 0.9 ]

<.클래스>

public class Practice2_Weight {
	/*
	 * 사용자로부터 키를 입력받아서(system.in) 표준 체중을 계산한 후에 사용자의 체중과 비교하여 "저체중인지, 표준인지, 과체중인지"를
	 * 판단하는 프로그램을 작성하라. 표준 체중 계산식은 다음을 사용하라. [ 표준체중 = ( 키 - 100 ) * 0.9 ]
	 * 
	 */
	private double myHeight;
	private double myWeight;
	private double sWeight;

	public Practice2_Weight(double myHeight, double myWeight) {
		this.myHeight = myHeight;
		this.myWeight = myWeight;
		sWeight = ((myHeight - 100) * 0.9);
		// 위에서 정의해버리면 순서가 섞여서 안됨. 키랑 몸무게가 다 0이 들어가버리니까.
	}

	public void Standard() {
		if (myWeight > sWeight) {
			System.out.println("당신은 과체중입니다.");
		} else if (myWeight == sWeight) {
			System.out.println("당신은 표준 체중입니다.");
		} else if (myWeight < sWeight) {
			System.out.println("당신은 저체중입니다.");
		}
	}

}


<메인>

import java.util.Scanner;

public class WeightMain {

	public static void main(String[] args) {
		// 표준몸무게 체크 프로그램
		Scanner scanner = null;
		System.out.println("< 프로그램 시작 >");
		while (true) {

			scanner = new Scanner(System.in);

			System.out.println("키, 몸무게를 입력하세요. (숫자만)");
			double myHeight = scanner.nextDouble();
			double myWeight = scanner.nextDouble();

			Practice2_Weight weight = new Practice2_Weight(myHeight, myWeight);

			System.out.println("표준 체중은 " + ((myHeight - 100) * 0.9) + "kg");
			weight.Standard();

			System.out.println(">> 계속 하시겠습니까? (Y / N)");

			char anwser = scanner.next().charAt(0);
			if (anwser == 'Y' || anwser == 'y')
				continue;
			else
				break;

		}
		scanner.close();
		System.out.println("< 프로그램 종료 >");
	}

}


<출력>

< 프로그램 시작 >
키, 몸무게를 입력하세요. (숫자만)
160 50
표준 체중은 54.0kg
당신은 저체중입니다.
>> 계속 하시겠습니까? (Y / N)
n
< 프로그램 종료 >


10. 2와 100 사이에 있는 모든 소수(prime number)를 찾는 프로그램을 작성하라. 
주어진 정수 k를 2부터 k-1까지의 숫자로 나누어서 나머지가 0인 것이 하나라도 있으면 소수가 아니다.


11.사용자에게 받은 문자열을 역순으로 화면에 출력하는 프로그램을 작성하시오.
입력:abcde
출력:edcba



